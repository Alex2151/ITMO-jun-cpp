#include <iostream>
#include <thread>

using namespace std;


void threadFunction()
{
        cout << "Hello from thread" << endl;
}


void threadFunctionArgs(int x, double &y, std::string &name)
{


    cout << "x = " << x << "y = " << y
         << "name -" << name << endl;

    y++;
}

int main()
{

    /* создание объекта типа thread, в конструктор передается
     * имя функци threadFunction.
     * После создания объекта программа продолжает свое выполнение,
     * не дожидаясь результата выполнения.
     *
    */
    thread thr(threadFunction);

    /* Функция синхронизации потоков. Возвращает управления программе
     * после своего завершения.
     * Если запустить программу без вызова это функции, то произойдет
     * ошибка во время исполнения и программа аварийно завершиться,
     * так как необходимо чтобы все потоки завершили свою работу
     * до завершения главного потока.
     * Join - возвращает выполнения после того как потом закончится
     */
    thr.join();

    /* Если не нужно ждать когда поток завершиться, то используется
     * функция detach, процесс становится фоновым
     * После вызова этой функции
     * потоку нельзя больше сделать join.
     * Если поток не успеет завершиться до завершения главного потомка,
     * то он завершится принудительно
     */
//    thr.detach();

    cout << "Hello from main" << endl;


    double value = 13.54;
    string s_value = "tmp";

    /* Передача аргументов в функцию.
     * По умолчанию все аргументы передаются по значения
     * чтобы передать по ссылке необходимо использовать
     * std::ref
     * Передать можно любое количество аргументов
     * Нельзя получить то что вернет функция по завершению
     */
    thread thr2(threadFunctionArgs, 5, ref(value), ref(s_value));
    thr2.join();

    cout << "value " << value << endl;

    return 0;
}
